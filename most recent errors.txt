Test results for JsonTools v8.4 on Notepad++ 8.8.1 64bit
NOTE: Ctrl-F (regular expressions *on*) for "Failed [1-9]\d*" to find all failed tests
Tests failed: YAML dumper, performance and correctness of parsing and dumping arrays of non-integer numbers
=========================
Testing JNode Copy method
=========================

Failed 0 tests.
Passed 12 tests.
=========================
Testing JSON parser
=========================

obj =
/*foo*/ //bar
{"a": ‚Åü[1, 2, 3], ¬†"b": {}, „ÄÄ"–ØËçâ": [], "üòÄ": [[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,//üòÄ
 [113, 114]]],/*c√∂mment*/"d":[{"o":"√∂yster"},"c√§t",#python 
"dog"],"e":false,//c√∂mment
"f":null}//baz 
# more python
/*quz
zuq*/

Failed 0 tests.
Passed 145 tests.
=========================
Testing if JSON parser throws errors on bad inputs
=========================

Failed 0 tests.
Passed 5 tests.
=========================
Testing JSON parser advanced options
=========================

Failed 0 tests.
Passed 27 tests.
=========================
Testing JSON parser's linter
=========================

Failed 0 tests.
Passed 72 tests.
=========================
Testing JSON Lines parser
=========================

Failed 0 tests.
Passed 10 tests.
=========================
Testing parsing of numbers does not depend on current culture
=========================

Failed 0 tests.
Passed 1 tests.
=========================
Testing JsonParser.TryParseNumber method
=========================

Failed 0 tests.
Passed 39 tests.
=========================
Testing YAML dumper
=========================

Test 21 (Value contains quotes and colon) failed:
Expected
a: 'RT @blah: MondayMo"r''ing'

Got
a: "RT @blah: MondayMo\"r\'ing"

Test 22 (Value contains quotes and newline) failed:
Expected
a: "a\n'big'\ndog"

Got
a: "a\n\'big\'\ndog"

Test 24 (key contains quotes and colon) failed:
Expected
'"a: ''b''': a

Got
"\"a: ''b''": a

Failed 3 tests.
Passed 21 tests.
=========================
Testing slice extension
=========================

Failed 0 tests.
Passed 80 tests.
=========================
Testing Least Recently Used (LRU) cache implementation
=========================

Ran 15 tests for LruCache with size 5 and failed 0
Ran 30 tests for LruCache with size 10 and failed 0
Ran 51 tests for LruCache with size 17 and failed 0
Ran 135 tests for LruCache with size 45 and failed 0
Ran 192 tests for LruCache with size 64 and failed 0
=========================
Testing RemesPath parser and compiler
=========================

The queried JSON in the RemesParser tests is named foo:{"foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "quz": {}, "jub": [], "guzo": [[[1]], [[2], [3]]], "7": [{"foo": 2}, 1], "_": {"0": 0}}
Failed 0 tests.
Passed 542 tests.
=========================
Testing RemesPath throws errors on bad inputs
=========================

Failed 0 tests.
Passed 660 tests.
=========================
Testing RemesPath assignment operations
=========================

Failed 0 tests.
Passed 26 tests.
=========================
Testing RemesPath produces sane outputs on randomly generated queries
=========================

Fuzz tests query
{"a": [-4, -3.0, -2.0, -1, 0, 1, 2.0, 3.0, 4], "bc": NaN,"c`d": "df", "q": ["", "a", "jk", "ian", "", "32", "u", "aa", "moun"],"f": 1,"g": 1,"h": 1,"i": 1,"j": 1}
Ran 3750 fuzz tests
Failed 0 fuzz tests
=========================
Testing multi-statement queries in RemesPath
=========================

The queried JSON in the RemesParser complex query tests is named foo:{"foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "quz": {}, "jub": [], "guzo": [[[1]], [[2], [3]]], "7": [{"foo": 2}, 1], "_": {"0": 0}}
Failed 0 tests.
Passed 20 tests.
=========================
Testing JsonSchema generator
=========================

Failed 0 tests.
Passed 10 tests.
=========================
Testing JsonSchema validator
=========================

Failed 0 tests.
Passed 229 tests.
=========================
Testing JSON tabularizer
=========================

Failed 0 tests.
Passed 64 tests.
=========================
Testing CSV sniffer
=========================

Failed 0 tests.
Passed 23 tests.
=========================
Testing Glob syntax parser
=========================

Ran 59 tests and failed 0
=========================
Testing Random string from regex
=========================

Failed 0 tests.
Passed 61 tests.
=========================
Testing generation of random JSON from schema
=========================

Failed 0 tests.
Passed 19 tests.
=========================
Testing conversion of JSON to DSON (see https://dogeon.xyz/)
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing JNode PathToPosition method
=========================

Failed 0 tests.
Passed 40 tests.
=========================
Testing INI file parser
=========================

Failed 0 tests.
Passed 28 tests.
=========================
Testing UI tests
=========================

Failed 0 tests
Passed 354 tests
=========================
Testing JsonParser performance
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To convert JSON string of size 89556 into JNode took 3.166 +/- 2.21 ms over 32 trials
Load times (ms): 5, 3, 2, 2, 10, 6, 1, 2, 4, 1, 1, 6, 1, 1, 1, 4, 1, 1, 6, 1, 1, 1, 4, 1, 1, 6, 1, 1, 1, 4, 1, 1
=========================
Performance tests for RemesPath (float arithmetic)
=========================

Compiling query "@[@[:].a * @[:].t < @[:].e]" took 0.058 ms the first time, including approximately 0.066 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@[@[:].a * @[:].t < @[:].e]" on JNode from JSON of size 89556 into took 0.114 +/- 0.519 ms over 40 trials
Query times (ms): 0.063, 0.036, 0.023, 0.034, 0.023, 0.024, 0.023, 0.031, 0.024, 0.023, 0.024, 0.023, 0.024, 0.027, 0.024, 0.024, 0.024, 0.023, 0.023, 0.058, 0.032, 0.023, 0.024, 0.024, 0.024, 0.026, 3.354, 0.034, 0.025, 0.024, 0.024, 0.032, 0.024, 0.024, 0.024, 0.024, 0.023, 0.031, 0.096, 0.075
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (string operations)
=========================

Compiling query "@[@[:].z =~ `(?i)[a-z]{5}`]" took 0.05 ms the first time, including approximately 0.04 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@[@[:].z =~ `(?i)[a-z]{5}`]" on JNode from JSON of size 89556 into took 0.056 +/- 0.007 ms over 40 trials
Query times (ms): 0.086, 0.055, 0.054, 0.053, 0.062, 0.053, 0.053, 0.052, 0.053, 0.052, 0.059, 0.052, 0.052, 0.053, 0.052, 0.053, 0.057, 0.06, 0.052, 0.053, 0.052, 0.052, 0.058, 0.053, 0.053, 0.053, 0.053, 0.052, 0.058, 0.052, 0.054, 0.052, 0.053, 0.056, 0.08, 0.057, 0.053, 0.053, 0.053, 0.07
Preview of result: [{"A": "\n]o1VQ5t6g", "a": 4710024278, "b": 3268860721, "B": "g4Y7+ew^.v", "C": "<E_7XL7YS`", "c": 4921465277, "d": 9420665097, "D": "Q&S>NK<OOn", "E": "M?6Ll1W\nFM", "e": 4146283970, "f": 8384193493, "F": "z[jPvslL\tc", "g": 1578133296, "G": "m'M4h,`|Wk", "H": {"a": 5184250383, "b": 5337791147, "c"
...
=========================
Performance tests for RemesPath (basic recursive search)
=========================

Compiling query "@..*" took 0.016 ms the first time, including approximately 0.019 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@..*" on JNode from JSON of size 89556 into took 0.333 +/- 0.429 ms over 40 trials
Query times (ms): 0.288, 0.322, 0.266, 0.244, 0.243, 0.226, 0.241, 0.234, 0.241, 0.236, 0.248, 0.241, 0.305, 0.29, 0.285, 0.372, 0.304, 0.288, 2.964, 0.237, 0.226, 0.226, 0.225, 0.231, 0.226, 0.225, 0.236, 0.224, 0.73, 0.228, 0.231, 0.237, 0.237, 0.216, 0.217, 0.218, 0.226, 0.295, 0.294, 0.288
Preview of result: [1850111954, 9318359041, 7974777124, 2670309238, 6958410336, 8050244728, 3799657125, 2612807147, 7785993340, 9842767454, 2257474583, 2736529372, 4821265864, 3302084501, null, Infinity, true, false, true, 0.201077552261751, 0.110978036654776, 0.50917270025261, 0.798199326980627, 0.615212956451379, 0.
...
=========================
Performance tests for RemesPath (group_by, projections and aggregations)
=========================

Compiling query "group_by(@, s).*{
    Hmax: max((@[:].H)..*[is_num(@)][abs(@) < Infinity]),
    min_N: min((@[:].N)..*[is_num(@)][abs(@) < Infinity])
}" took 0.192 ms the first time, including approximately 0.17 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "group_by(@, s).*{
    Hmax: max((@[:].H)..*[is_num(@)][abs(@) < Infinity]),
    min_N: min((@[:].N)..*[is_num(@)][abs(@) < Infinity])
}" on JNode from JSON of size 89556 into took 0.222 +/- 0.128 ms over 40 trials
Query times (ms): 0.67, 0.168, 0.175, 0.164, 0.169, 0.17, 0.176, 0.162, 0.641, 0.16, 0.164, 0.16, 0.365, 0.502, 0.339, 0.339, 0.412, 0.182, 0.162, 0.175, 0.201, 0.16, 0.163, 0.156, 0.278, 0.166, 0.162, 0.155, 0.161, 0.154, 0.155, 0.168, 0.253, 0.156, 0.152, 0.162, 0.152, 0.162, 0.149, 0.154
Preview of result: {"false": {"Hmax": 9703256074.0, "min_N": 0.0395243372266771}, "true": {"Hmax": 9695512197.0, "min_N": 0.0231773915713427}}
...
=========================
Performance tests for RemesPath (variable assignments and simple aggregations)
=========================

Compiling query "var qmask = @[:].q;
var nmax_q = max(@[qmask].n);
var nmax_notq = max(@[not qmask].n);
ifelse(nmax_q > nmax_notq, `when q=true, nmax = ` + str(nmax_q), `when q=false, nmax= ` + str(nmax_notq))" took 0.132 ms the first time, including approximately 0.118 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "var qmask = @[:].q;
var nmax_q = max(@[qmask].n);
var nmax_notq = max(@[not qmask].n);
ifelse(nmax_q > nmax_notq, `when q=true, nmax = ` + str(nmax_q), `when q=false, nmax= ` + str(nmax_notq))" on JNode from JSON of size 89556 into took 0.022 +/- 0.029 ms over 40 trials
Query times (ms): 0.061, 0.198, 0.022, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.015, 0.015, 0.016, 0.016, 0.015, 0.015, 0.015, 0.016, 0.015, 0.015, 0.015, 0.016, 0.015, 0.015, 0.016, 0.015, 0.015, 0.016, 0.016, 0.015, 0.016, 0.016, 0.016, 0.015, 0.015, 0.027, 0.017, 0.015, 0.015, 0.015
Preview of result: "when q=false, nmax= 9830935647.0"
...
=========================
Performance tests for RemesPath (references to compile-time constant variables)
=========================

Compiling query "var X = X;
var onetwo = j`[1, 2]`;
@[:]->at(@, X)->at(@, onetwo)" took 0.064 ms the first time, including approximately 0.062 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "var X = X;
var onetwo = j`[1, 2]`;
@[:]->at(@, X)->at(@, onetwo)" on JNode from JSON of size 89556 into took 0.017 +/- 0.005 ms over 40 trials
Query times (ms): 0.037, 0.016, 0.016, 0.015, 0.016, 0.016, 0.015, 0.016, 0.036, 0.015, 0.016, 0.015, 0.016, 0.016, 0.015, 0.016, 0.016, 0.016, 0.016, 0.015, 0.016, 0.016, 0.015, 0.016, 0.016, 0.015, 0.016, 0.015, 0.016, 0.016, 0.015, 0.016, 0.016, 0.016, 0.016, 0.015, 0.016, 0.016, 0.015, 0.016
Preview of result: [[1695727848, 0.287562638736685], [2126430375, 0.00767794129708177], [5310550656, 0.380769772645687], [2519183283, 0.153176220930558], [6610062385, 0.662996225870666], [987168256, 0.924410189999928], [6615003609, 0.917112691225947], [4465232046, 0.684311931851536], [8654414565, 0.631485392105992], [
...
=========================
Performance tests for RemesPath (references to variables that are not compile-time constants)
=========================

Compiling query "var X = @->`X`;
var onetwo = @{1, 2};
@[:]->at(@, X)->at(@, onetwo)" took 0.095 ms the first time, including approximately 0.078 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "var X = @->`X`;
var onetwo = @{1, 2};
@[:]->at(@, X)->at(@, onetwo)" on JNode from JSON of size 89556 into took 0.018 +/- 0.005 ms over 40 trials
Query times (ms): 0.044, 0.016, 0.016, 0.016, 0.015, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.015, 0.028, 0.016, 0.016, 0.016, 0.016, 0.015, 0.016, 0.016, 0.015, 0.016, 0.016, 0.015, 0.016, 0.016, 0.015, 0.016, 0.016, 0.015, 0.027, 0.017, 0.016, 0.023, 0.016, 0.015, 0.016, 0.016, 0.015, 0.026
Preview of result: [[1695727848, 0.287562638736685], [2126430375, 0.00767794129708177], [5310550656, 0.380769772645687], [2519183283, 0.153176220930558], [6610062385, 0.662996225870666], [987168256, 0.924410189999928], [6615003609, 0.917112691225947], [4465232046, 0.684311931851536], [8654414565, 0.631485392105992], [
...
=========================
Performance tests for RemesPath (simple string mutations)
=========================

Compiling query "@[:].z = s_sub(@, g, B)" took 0.043 ms the first time, including approximately 0.041 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@[:].z = s_sub(@, g, B)" on JNode from JSON of size 89556 into took 0.016 +/- 0.006 ms over 40 trials
Query times (ms): 0.021, 0.012, 0.012, 0.011, 0.02, 0.015, 0.019, 0.014, 0.014, 0.015, 0.013, 0.014, 0.013, 0.014, 0.015, 0.015, 0.024, 0.017, 0.013, 0.012, 0.012, 0.016, 0.014, 0.011, 0.012, 0.011, 0.016, 0.011, 0.011, 0.012, 0.011, 0.022, 0.019, 0.015, 0.043, 0.022, 0.033, 0.013, 0.014, 0.01
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (simple number mutations)
=========================

Compiling query "@[:].x = ifelse(@ < 0.5, @ + 3, @ - 3)" took 0.077 ms the first time, including approximately 0.062 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@[:].x = ifelse(@ < 0.5, @ + 3, @ - 3)" on JNode from JSON of size 89556 into took 0.026 +/- 0.01 ms over 40 trials
Query times (ms): 0.039, 0.032, 0.025, 0.03, 0.019, 0.018, 0.018, 0.018, 0.018, 0.018, 0.019, 0.017, 0.018, 0.021, 0.017, 0.024, 0.02, 0.041, 0.03, 0.021, 0.019, 0.019, 0.02, 0.035, 0.048, 0.058, 0.041, 0.025, 0.028, 0.025, 0.05, 0.029, 0.021, 0.023, 0.021, 0.019, 0.029, 0.028, 0.031, 0.021
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (mutations with a for loop)
=========================

Compiling query "var xhalf = @[:].x < 0.5;
for lx = zip(@[:].l, xhalf);
    lx[0] = ifelse(lx[1], foo, bar);
end for;" took 0.129 ms the first time, including approximately 0.108 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "var xhalf = @[:].x < 0.5;
for lx = zip(@[:].l, xhalf);
    lx[0] = ifelse(lx[1], foo, bar);
end for;" on JNode from JSON of size 89556 into took 0.074 +/- 0.177 ms over 40 trials
Query times (ms): 0.101, 1.177, 0.064, 0.039, 0.037, 0.037, 0.038, 0.038, 0.039, 0.037, 0.037, 0.044, 0.035, 0.058, 0.045, 0.04, 0.048, 0.037, 0.04, 0.037, 0.037, 0.04, 0.039, 0.039, 0.042, 0.038, 0.05, 0.046, 0.038, 0.038, 0.038, 0.046, 0.038, 0.04, 0.049, 0.038, 0.038, 0.038, 0.117, 0.064
Preview of result: [["bar", false], ["bar", false], ["foo", true], ["foo", true], ["foo", true], ["foo", true], ["foo", true], ["bar", false], ["bar", false], ["bar", false], ["foo", true], ["foo", true], ["bar", false], ["bar", false], ["foo", true], ["bar", false], ["bar", false], ["bar", false], ["foo", true], ["ba
...
=========================
Testing performance and correctness of parsing and dumping arrays of non-integer numbers
=========================

To parse arrays of 5500 non-integer numbers (representative length = 105884, representative example preview: "[-549.8395539110807e48, 6.267437020240071428e58, 329.0, -232856018.74199697362, -86944.362388215, 418.13359, -67.708767321180048, 11365.5085071610e-82, -4408.13321196565415, 982301.9974815048421863, 1...") took 2.18 +/- 0.848 ms over 40 trials
Times to parse (ms): 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 7
To re-compress (convert back to minimal JSON strings) the arrays made from parsing those strings took 7.51 +/- 0.878 ms over 40 trials
Times to re-compress (ms): 7, 6, 6, 7, 8, 7, 8, 6, 7, 10, 10, 7, 7, 6, 7, 6, 7, 6, 7, 7, 8, 7, 7, 7, 8, 6, 7, 7, 7, 7, 7, 9, 7, 6, 7, 7, 6, 7, 7, 7
FAIL: The following 1 double (out of 220000 total) did not round-trip:
-9349485.1650409009
=========================
Testing performance of JSON compression and pretty-printing
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To compress JNode from JSON string of 89556 took 4.299 +/- 0.673 ms over 64 trials (minimal whitespace, sortKeys=TRUE)
To compress JNode from JSON string of 89556 took 2.247 +/- 0.293 ms over 64 trials (minimal whitespace, sortKeys=FALSE)
To Google-style pretty-print JNode from JSON string of 89556 took 4.441 +/- 0.447 ms over 64 trials (sortKeys=true, indent=4)
To Whitesmith-style pretty-print JNode from JSON string of 89556 took 4.596 +/- 0.545 ms over 64 trials (sortKeys=true, indent=4)
To PPrint-style pretty-print JNode from JSON string of 89556 took 6.77 +/- 0.802 ms over 64 trials (sortKeys=true, indent=4)
=========================
Testing performance of JsonSchemaValidator and random JSON creation
=========================

To create a random set of JSON from file at path C:\Users\mjols\Documents\npp.8.8.1.portable.x64\plugins\JsonTools\testfiles\tweet_schema.json of size 203670 (array of 15 items) based on the matching schema took 6.863 +/- 2.806 ms over 25 trials
To compile the schema to a validation function took 0.23 +/- 0.067 ms over 25 trials
To validate JSON of size 203670 (array of 15 items) based on the compiled schema took 1.074 +/- 0.144 ms over 25 trials
=========================
Testing performance of random JSON from schema with patterns and patternProperties
=========================

To create a random set of JSON from string (see TestRunner.cs) of size 30667 (array of 120 items) based on the matching schema took 1.648 +/- 0.869 ms over 25 trials
To compile the schema to a validation function took 0.274 +/- 0.028 ms over 25 trials
To validate JSON of size 30667 (array of 120 items) based on the compiled schema took 9.431 +/- 0.316 ms over 25 trials
=========================
Testing performance of random JSON from schema *ignoring* patterns and patternProperties
=========================

To create a random set of JSON from string (see TestRunner.cs) of size 10994 (array of 120 items) based on the matching schema took 0.911 +/- 0.491 ms over 25 trials
To compile the schema to a validation function took 0.338 +/- 0.385 ms over 25 trials
To validate JSON of size 10994 (array of 120 items) based on the compiled schema took 5.934 +/- 0.507 ms over 25 trials
=========================
Testing JSON grepper's API request tool
=========================

Testing with 3 urls
Testing with 1 urls
Failed 0 tests.
Passed 4 tests.
=========================
Testing JSON grepper's file reading ability
=========================

Failed 0 tests.
Passed 7 tests.
